from models.GeneticAlgoritm.Person import Person
from random import randint
class Herd:
    def __init__(self,**kwargs):
        self.__name=None
        self.__path=None
        self.__herd=[]
        self.__mutationRatio=None
        self.__size=None
        self.__copulationSize=None
        self.__evaluationAlghoritm=None
        self.__generation=None
        self.__lastNumber=None
        self.__object=None
        self.__countOfFights=None
        for k,v in kwargs.items():
            if k=="size":
                self.__size=v
            elif k=="COF":
                self.__countOfFights=v
            elif k=="object":
                self.__object=v
            elif k=="load":
                print("XD")
                break
            elif k=="MR":
                self.__mutationRatio=v
            elif k=="name":
                self.__name=v
            elif k=="path":
                self.__path=v
            elif k=="CS":
                self.__copulationSize=v
            elif k=="EA":
                self.__evaluationAlghoritm=v
            else:
                raise Exception("Nie ma takiego algorytmu")
            self.__generation=0
            self.__lastNumber=0
    def info(self):
        return f"Herd {self.__name} on {self.__generation}"
    def stat(self):
        return f"Path: {self.__path}\nObject: {self.__object}\nSize: {self.__size}\nCS: {self.__copulationSize}\nMR: {self.__mutationRatio}\nEA: {self.__evaluationAlghoritm}\nCOF: {self.__countOfFights}"
    def printHerd(self):
        for i in self.__herd:
            print(i)
    def test(self):
        self.__herd.append(self.__object())
    def generate(self):
        for i in range(self.__size):
            self.__herd.append(self.__object(self.__lastNumber))
            self.__lastNumber+=1
    def __fightBetween(self,first,second):
        self.__evaluationAlghoritm(first,second)
    def __fight(self):
        for i in self.__herd:
            while i.getCountOfFights()<self.__countOfFights:
                rand=randint(0,len(self.__herd)-1)
                if(self.__herd[rand].getCountOfFights()<self.__countOfFights):
                    self.__fightBetween(i,self.__herd[rand])

                    i.addPoints(randint(1,5))
                    self.__herd[rand].addPoints(randint(1,5))

                    i.addFight()
                    self.__herd[rand].addFight()
    def __mutation(self):
        for i in self.__herd:
            if (randint(0,1000)/1000)<=self.__mutationRatio:
                i.mutation()
    def __roussianRoulette(self):
        count =0
        for i in self.__herd:
            count+=i.getPoints()
        rand=randint(0,count)
        for i in self.__herd:
            rand-=i.getPoints()
            if rand <=0:
                return i
    def __copulation(self):
        newHerd=[]
        for i in range(self.__copulationSize):
            newHerd.append(self.__roussianRoulette().copulate(self.__roussianRoulette(),self.__lastNumber))
            self.__lastNumber+=1
        for i in newHerd:
            self.__herd.append(i)
    def __createNewHerd(self):
        newHerd=[]
        for i in range(self.__size):
            pom=self.__roussianRoulette()
            self.__herd.remove(pom)
            newHerd.append(pom)
        for i in range(len(self.__herd)):
            self.__herd.remove(self.__herd[0])
        self.__herd=newHerd
    def __printBest(self):
        best=0
        for i in range(1,len(self.__herd)):
            if self.__herd[i].getPoints()>self.__herd[best].getPoints():
                best=i
        return best
    def run(self,count):
        for i in range(count):
            self.__mutation()
            self.__fight()
            self.__copulation()
            self.__fight()
            self.__createNewHerd()
            print(self.__printBest())

def pom(a,b):
    pass
a=Herd(name="Brutus",CS=400,size=1000,path="AI/Brutus",MR=0.06,object=Person,COF=50,EA=pom)
a.generate()
a.run(1000)

